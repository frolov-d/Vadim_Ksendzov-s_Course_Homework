{
	"info": {
		"_postman_id": "fb0d6489-75c9-4be6-97da-49e25c40af38",
		"name": "Homework_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// pm.test(\"Body matches string\", function () {\r",
							"//     pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"// });\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    var responseText = pm.response.text();\r",
							"    pm.expect(responseText).to.be.a(\"string\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseJson = pm.response.json();\r",
							"// console.log(responseJson);\r",
							"\r",
							"pm.test(\"Name is Dmitry\", () => {\r",
							"    pm.expect(responseJson.name).to.eql(\"Dmitry\");\r",
							"});\r",
							"\r",
							"// console.log(typeof(responseJson.age));\r",
							"\r",
							"pm.test(\"Age is 31\", () => {\r",
							"    pm.expect(responseJson.age).to.eql(\"31\");\r",
							"});\r",
							"\r",
							"// console.log(typeof(responseJson.salary));\r",
							"\r",
							"pm.test(\"Salary is 1000\", () => {\r",
							"    pm.expect(responseJson.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"var requestBody = request.data;\r",
							"// console.log(requestBody);\r",
							"\r",
							"pm.test(\"Name from response equals name from request\", () => {\r",
							"    pm.expect(responseJson.name).to.eql(requestBody.name);\r",
							"});\r",
							"\r",
							"// pm.test(\"Name from response equals name from request (manually)\", () => {\r",
							"//     pm.expect(\"Dmitry\").to.eql(requestBody.name);\r",
							"// });\r",
							"\r",
							"pm.test(\"Age from response equals age from request\", () => {\r",
							"    pm.expect(responseJson.age).to.eql(requestBody.age);\r",
							"});\r",
							"\r",
							"pm.test(\"Salary from response equals salary from request\", () => {\r",
							"    pm.expect(parseInt(responseJson.salary)).to.eql(parseInt(requestBody.salary));\r",
							"});\r",
							"\r",
							"console.log(responseJson.family);\r",
							"\r",
							"// console.log(typeof(responseJson.family.u_salary_1_5_year));\r",
							"\r",
							"pm.test(\"Salary in 4 years from response equals salary*4\", () => {\r",
							"    pm.expect(responseJson.family.u_salary_1_5_year).to.eql(requestBody.salary * 4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Dmitry",
							"type": "text"
						},
						{
							"key": "age",
							"value": "31",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseJson = pm.response.json();\r",
							"\r",
							"var requestParams = pm.request.url.query.toObject();\r",
							"\r",
							"pm.test(\"Name from response equals name from request\", () => {\r",
							"    pm.expect(responseJson.name).to.eql(requestParams.name);\r",
							"});\r",
							"\r",
							"pm.test(\"Age from response equals age from request\", () => {\r",
							"    pm.expect(responseJson.age).to.eql(requestParams.age);\r",
							"});\r",
							"\r",
							"pm.test(\"Salary from response equals salary from request\", () => {\r",
							"    pm.expect(responseJson.salary).to.eql(parseInt(requestParams.salary));\r",
							"});\r",
							"// console.log(typeof(responseJson.salary));\r",
							"// console.log(typeof(requestParams.salary));\r",
							"\r",
							"console.log(responseJson.family);\r",
							"\r",
							"pm.test(\"Dog parameter has a Name parameter\", () => {\r",
							"    pm.expect(pm.response.json(\"dog\")).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"// pm.test(\"Dog parameter has a Name parameter\", () => {\r",
							"//     pm.expect(responseJson.family.pets.dog).to.have.property(\"name\");\r",
							"// });\r",
							"\r",
							"pm.test(\"Dog parameter has an Age parameter\", () => {\r",
							"    pm.expect(pm.response.json(\"dog\")).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"pm.test(\"Name equals 'Luky'\", () => {\r",
							"    pm.expect(responseJson.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"pm.test(\"Age equals 4\", () => {\r",
							"    pm.expect(responseJson.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Dmitry&age=31&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Dmitry"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseJson = pm.response.json();\r",
							"\r",
							"var requestParams = pm.request.url.query.toObject();\r",
							"\r",
							"pm.test(\"Name from response equals name from request\", () => {\r",
							"    pm.expect(responseJson.name).to.eql(requestParams.name);\r",
							"});\r",
							"\r",
							"pm.test(\"Age from response equals Age from request\", () => {\r",
							"    pm.expect(responseJson.age).to.eql(parseInt(requestParams.age));\r",
							"});\r",
							"\r",
							"// console.log(typeof(responseJson.age));\r",
							"// console.log(typeof(requestParams.age));\r",
							"\r",
							"console.log(requestParams.salary);\r",
							"\r",
							"console.log(responseJson.salary);\r",
							"\r",
							"console.log(\"The first element of salary from response: \" + responseJson.salary[0]);\r",
							"\r",
							"console.log(\"The second element of salary from response: \" + responseJson.salary[1]);\r",
							"\r",
							"console.log(\"The third element of salary from response: \" + responseJson.salary[2]);\r",
							"\r",
							"pm.test(\"The first element of salary from response equals salary from request\", () => {\r",
							"    pm.expect(JSON.stringify(responseJson.salary[0])).to.eql(requestParams.salary);\r",
							"})\r",
							"\r",
							"// console.log(typeof(responseJson.salary));\r",
							"// console.log(typeof(requestParams.salary));\r",
							"\r",
							"pm.test(\"The second element of salary from response equals salary*2 from request\", () => {\r",
							"    pm.expect(parseInt(responseJson.salary[1])).to.eql(parseInt(requestParams.salary) * 2);\r",
							"})\r",
							"\r",
							"pm.test(\"The third element of salary from response equals salary*3 from request\", () => {\r",
							"    pm.expect(parseInt(responseJson.salary[2])).to.eql(parseInt(requestParams.salary) * 3);\r",
							"})\r",
							"\r",
							"pm.environment.set(\"name\", requestParams.name);\r",
							"\r",
							"pm.environment.set(\"age\", requestParams.age);\r",
							"\r",
							"pm.environment.set(\"salary\", requestParams.salary);\r",
							"\r",
							"for (var i = 0; i < responseJson.salary.length; i++) {\r",
							"    console.log(responseJson.salary[i]);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Dmitry&age=31&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Dmitry"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var salary = JSON.parse(pm.environment.get('salary'));\r",
							"\r",
							"// console.log(salary[0])\r",
							"// console.log(salary[1])\r",
							"// console.log(salary[2])"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseJson = pm.response.json();\r",
							"\r",
							"var requestParams = pm.request.url.query.toObject();\r",
							"\r",
							"pm.test(\"Response has start_qa_salary parameter\", () => {\r",
							"    pm.expect(responseJson).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response has qa_salary_after_6_months parameter\", () => {\r",
							"    pm.expect(responseJson).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response has qa_salary_after_12_months parameter\", () => {\r",
							"    pm.expect(responseJson).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response has qa_salary_after_1.5_year parameter\", () => {\r",
							"    pm.expect(responseJson).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response has qa_salary_after_3.5_years parameter\", () => {\r",
							"    pm.expect(responseJson).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response has person parameter\", () => {\r",
							"    pm.expect(responseJson).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"pm.test(\"start_qa_salary from response equals start_qa_salary from request\", () => {\r",
							"    pm.expect(responseJson.start_qa_salary).to.eql(parseInt(requestParams.salary));\r",
							"});\r",
							"\r",
							"pm.test(\"qa_salary_after_6_months from response equals salary*2 from request\", () => {\r",
							"    pm.expect(responseJson.qa_salary_after_6_months).to.eql(parseInt(requestParams.salary) * 2);\r",
							"});\r",
							"\r",
							"pm.test(\"qa_salary_after_12_months from response equals salary*2.7 from request\", () => {\r",
							"    pm.expect(responseJson.qa_salary_after_12_months).to.eql(parseInt(requestParams.salary) * 2.7);\r",
							"});\r",
							"\r",
							"pm.test(\"qa_salary_after_1.5_year from response equals salary*3.3 from request\", () => {\r",
							"    pm.expect(responseJson).to.have.property(\"qa_salary_after_1.5_year\").to.eql(parseInt(requestParams.salary) * 3.3);\r",
							"});\r",
							"\r",
							"pm.test(\"qa_salary_after_3.5_years from response equals salary*3.8 from request\", () => {\r",
							"    pm.expect(responseJson).to.have.property(\"qa_salary_after_3.5_years\").to.eql(parseInt(requestParams.salary) * 3.8);\r",
							"});\r",
							"\r",
							"pm.test(\"The first (actually the second) element from u_name equals salary from request\", () => {\r",
							"    pm.expect(responseJson.person.u_name[1]).to.eql(parseInt(requestParams.salary));\r",
							"});\r",
							"\r",
							"pm.test(\"u_age equals age from request\", () => {\r",
							"    pm.expect(responseJson.person.u_age).to.eql(parseInt(requestParams.age));\r",
							"});\r",
							"\r",
							"pm.test(\"u_salary_5_years from response equals salary*4.2 from request\", () => {\r",
							"    pm.expect(responseJson.person.u_salary_5_years).to.eql(parseInt(requestParams.salary) * 4.2);\r",
							"});\r",
							"\r",
							"for (const key in responseJson.person) {\r",
							"    console.log(`${key}: ${responseJson.person[key]}`);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_2?salary={{salary}}&age={{age}}&name={{name}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_2"
					],
					"query": [
						{
							"key": "salary",
							"value": "{{salary}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "name",
							"value": "{{name}}"
						}
					]
				}
			},
			"response": []
		}
	]
}